; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
; (let [host "127.0.0.1"]
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index
     
      ; log all events
      ; #(info "received event" %)

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))
      )
    )
  )
)


; tag::percentile[]
(let [index (index)]
  (streams
    (where (and (= service "IBANValidatorCommand") (not (= metric nil)) ) 

       ; Now, we'll calculate the 50th, 95th, and 99th percentile for all
       ; requests in each 5-second interval.

       (percentiles 5 [0.5 0.95 0.99]

           ; Percentiles will emit events like
           ; {:service "api req 0.5" :metric 0.12}  
		   ; We'll add them to the index, so they can show up
           ; on our dashboard.

           index)
    )
  )
)
; end::percentile[]

; tag::count[]
(let [index (index)]
  (streams
    (where (and (= service "IBANValidatorCommand") (= metric nil) ) 

      (by :state
        (with :metric 1 (with :service "IBAN Count"
          (rate 5 
          ; log all events (for debugging)
          #(info "received event" %)
            index
          )
        ))
      )

    )
  )
)
; end::count[]
